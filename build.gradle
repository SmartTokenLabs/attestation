plugins {
    id 'java'
    id 'com.github.node-gradle.node' version '3.1.1'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'org.sonarqube' version '3.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.owasp.dependencycheck' version '7.1.1'
}

node {
    download = true
    version = '14.+'
}

project.tasks['sonarqube'].dependsOn 'test'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

if (JavaVersion.current() < JavaVersion.VERSION_11) {
    // Weiwu mentioned that this is needed to prevent a issue
    throw new GradleException('This build must be run with java 11 or higher.')
}
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    runtimeOnly 'ch.qos.logback:logback-classic:[1.2.11, 2)'
    implementation 'org.bouncycastle:bcprov-jdk15on:[1.70,)'
    implementation 'org.bouncycastle:bcpkix-jdk15on:[1.70,)'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:[2.17.2, 3)'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:[5.8.2, 6)'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-params:[5.8.2, 6)'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:[5.8.2, 6)'
    intTestImplementation 'org.junit.jupiter:junit-jupiter-api:[5.8.2, 6)'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:[5.8.2, 6)'
    intTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:[5.8.2, 6)'
    implementation 'org.web3j:core:[4,5.0.0)'
    implementation 'com.auth0:java-jwt:[3.19.1, 4)'
    implementation 'org.json:json:20220320' // To ensure obsolete trulioo code can compile
    implementation group: 'com.github.cliftonlabs', name: 'json-simple', version: '[4.0.1, 5)'
    implementation group: 'commons-cli', name: 'commons-cli', version: '[1.5.0, 2)'
    implementation group: 'com.google.code.gson', name: 'gson', version: '[2.9.0, 3)'
    testImplementation 'org.mockito:mockito-core:[4.5.1, 5)'
    implementation 'com.fasterxml.jackson.core:jackson-databind:[2.13.2.2,)'
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: '[1.5.2,)'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            //             exclude 'org/tokenscript/attestation/demo'
            //             exclude 'com/alphawallet/token/tools'
            //             exclude 'com/alphawallet/token/util'
            exclude 'dk' // Trulioo specific code
        //             exclude 'org/devcon'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
            //             exclude 'org/tokenscript/attestation/demo'
            //             exclude 'com/alphawallet/token/tools'
            //             exclude 'com/alphawallet/token/util'
            exclude 'dk' // Trulioo specific code
        //             exclude 'org/devcon'
        }
    }
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
    manifest {
        attributes 'Main-Class': 'org.tokenscript.attestation.demo.Demo'
    }
    exclude '**/Log4j2Plugins.dat'
}

task packageFat(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

task packageLibs(type: Jar) {
    into('java/lib') {
        from configurations.runtimeClasspath
    }
    dirMode = 0755
    fileMode = 0755
}

// exclude bunch of com/alphawallet/â€¦ but include token/entity and Signable class
task packageAttestation(type: Jar) {
    from compileJava
    from processResources
    exclude {
        if (it.relativePath.pathString.startsWith('dk')
        //            || it.relativePath.pathString.startsWith('org/tokenscript/attestation/demo')
        //            || it.relativePath.pathString.startsWith('com/alphawallet/token/tools')
        //            || it.relativePath.pathString.startsWith('com/alphawallet/token/util')
        //            || it.relativePath.pathString.startsWith('org/devcon'))
        ) {
            return true
        }
    }
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task testJavaScript(type: NodeTask) {
    dependsOn 'test'
    dependsOn 'npmInstall'
    script = file('src/test/javascript/ParserSerializerTest.js')
}

group = 'org.tokenscript'
archivesBaseName = 'attestation'
version = '0.4'

/** See https://docs.gradle.org/current/userguide/publishing_maven.html for details
 * For actually updating the Maven repo update the version reference in README.md,
 * then run publishAllPublicationsToMaven and then follow the manual
 * at https://central.sonatype.org/publish/release/
 **/
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'attestation'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Attestation'
                // optionally artifactId can be defined here
                description = 'Library for constructing and verifying both public and private identifier attestations.'
                url = 'https://github.com/TokenScript/attestation'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'jot2re'
                        name = 'Tore Frederiksen'
                        email = 'jot2re@gmail.com'
                    }
                    developer {
                        id = 'colourful-land'
                        name = 'Weiwu Zhang'
                        email = 'weiwu.zhang@alphawallet.com'
                    }
                    developer {
                        id = 'oleggrib'
                        name = 'Oleg Grib'
                    }
                }

                scm {
                    connection = 'scm:https://github.com/TokenScript/attestation.git'
                    developerConnection = 'scm:git:https://github.com/TokenScript/attestation.git'
                    url = 'https://github.com/TokenScript/attestation'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            // Add gradle.properties file with the following elements and add the correct
            // environment variables for OSSRHUSERNAME and OSSRHPASSWORD, then follow the manual at
            // https://central.sonatype.org/publish/release/ in order to push an update to maven central
            // signing.keyId=<any gpg key id>
            // signing.password=<gpg key password>
            // signing.secretKeyRingFile=<directory to gpg secret key file>
            credentials {
                username = System.getenv('OSSRHUSERNAME')
                password = System.getenv('OSSRHPASSWORD')
            }
        }
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/TokenScript/attestation')
            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

signing {
    // In github action environment pass gpg signature from env
    if (System.getenv('CI') == 'true') {
        def signingKey = findProperty('signingKey')
        def signingPassword = findProperty('signingPassword') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
    }

    sign publishing.publications.mavenJava
}

javadoc {
    options.encoding = 'UTF-8'
    // For the future, if we end up needing an earlier version of java than 11
    if (JavaVersion.current() > JavaVersion.VERSION_11) {
        options.addBooleanOption('html5', true)
    }
}

build.dependsOn packageAttestation
