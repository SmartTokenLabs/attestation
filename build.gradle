buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

plugins {
    id 'java'
    id "com.github.node-gradle.node" version "3.1.0"
    id 'maven-publish'
}

node {
    download = true
    version = "14.15.3"
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven'
apply plugin: 'signing'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

if(JavaVersion.current() < JavaVersion.VERSION_11){
    throw new GradleException("This build must be run with java 11 or higher.")
}

repositories {
    mavenCentral()
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.13.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.68'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.13.0'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.2.0'
    implementation('com.amazonaws:aws-lambda-java-core:1.2.0')
    implementation('com.amazonaws:aws-lambda-java-events:2.2.6')
    implementation 'org.json:json:20200518'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    intTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    intTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation 'org.web3j:core:4.8.4'
    implementation 'com.auth0:java-jwt:3.12.0'
    implementation group: 'com.github.cliftonlabs', name: 'json-simple', version: '3.1.0'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    testImplementation 'org.mockito:mockito-core:2.+'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            exclude 'id' // the code is being reworked on
            exclude 'dk/alexandra/trulioo' // Trulioo specific code
            exclude 'io/alchemynft'
            exclude 'org/devcon'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
            exclude 'id' // the code is being reworked on
            exclude 'dk/alexandra/trulioo' // Trulioo specific code
            exclude 'io/alchemynft'
            exclude 'org/devcon'
        }
    }
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
	      }
    }
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
    manifest {
        attributes 'Main-Class': 'org.tokenscript.attestation.demo.Demo'
    }
    exclude "**/Log4j2Plugins.dat"
}

task packageFat(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

task packageLibs(type: Jar) {
    into('java/lib') {
        from configurations.runtimeClasspath
    }
    dirMode = 0755
    fileMode = 0755
}

// exclude bunch of com/alphawallet/â€¦ but include token/entity and Signable class
task packageAttestation(type: Jar) {
    from compileJava
    from processResources
    exclude {
        if(it.relativePath.pathString.startsWith('com/alphawallet/attestation/demo')
           || it.relativePath.pathString.startsWith('com/alphawallet/token/tools')
           || it.relativePath.pathString.startsWith('com/alphawallet/token/util')
           || it.relativePath.pathString.startsWith('id/attestation')
           || it.relativePath.pathString.startsWith('dk')
           || it.relativePath.pathString.startsWith('io')
           || it.relativePath.pathString.startsWith('org/devcon')){
            return true
        }
    }
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task testJavaScript(type: NodeTask) {
    dependsOn 'test'
    dependsOn 'npmInstall'
    script = file('src/test/javascript/ParserSerializerTest.js')
}

group = "org.tokenscript"
archivesBaseName = "attestation"
version = "0.1"

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Attestation'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Library for constructing and verifying both public and private identifier attestations.'
        url 'https://github.com/TokenScript/attestation'

        scm {
          connection 'scm:https://github.com/TokenScript/attestation.git'
          developerConnection 'scm:https://github.com/TokenScript/attestation.git'
          url 'https://github.com/TokenScript/attestation'
        }

        licenses {
          license {
            name 'MIT'
            url 'https://opensource.org/licenses/MIT'
          }
        }

        developers {
          developer {
            id 'jot2re'
            name 'Tore Frederiksen'
            email 'jot2re@gmail.com'
          }
          developer {
            id 'colourful-land'
            name 'Weiwu Zhang'
            email 'weiwu.zhang@alphawallet.com'
          }
          developer {
            id 'oleggrib'
            name 'Oleg Grib'
          }
        }
      }
    }
  }
}

javadoc {
    options.encoding = 'UTF-8'
}

build.dependsOn packageAttestation
